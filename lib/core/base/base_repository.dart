import 'package:dartz/dartz.dart';
import '../error/failures.dart';

/// ๐ฆ BaseRepository - ูุจุฏุฃ ุงููุณุคูููุฉ ุงููุงุญุฏุฉ (SRP)
/// ูู repository ูุณุคูู ุนู ููุน ุจูุงูุงุช ูุงุญุฏ ููุท
///
/// ๐ฆ ูุจุฏุฃ ุงููุชุญ ูุงูุฅุบูุงู (OCP)
/// ููุชูุญ ููุชูุณูุนุ ูุบูู ููุชุนุฏูู
///
/// ๐ฆ ูุจุฏุฃ ุงูุงุณุชุจุฏุงู (LSP)
/// ุฃู repository ูููู ุฃู ูุญู ูุญู BaseRepository
///
/// ๐ฆ ูุจุฏุฃ ููุจ ุงูุงุนุชูุงุฏูุงุช (DIP)
/// ูุนุชูุฏ ุนูู abstraction ูููุณ implementation
abstract class BaseRepository<T> {
  /// ุฌูุจ ุฌููุน ุงูุนูุงุตุฑ
  Future<Either<Failure, List<T>>> getAll();

  /// ุฌูุจ ุนูุตุฑ ุจูุงุณุทุฉ ุงููุนุฑู
  Future<Either<Failure, T?>> getById(String id);

  /// ุฅุถุงูุฉ ุนูุตุฑ ุฌุฏูุฏ
  Future<Either<Failure, T>> add(T item);

  /// ุชุญุฏูุซ ุนูุตุฑ ููุฌูุฏ
  Future<Either<Failure, T>> update(String id, T item);

  /// ุญุฐู ุนูุตุฑ
  Future<Either<Failure, bool>> delete(String id);

  /// ุงูุจุญุซ ูู ุงูุนูุงุตุฑ
  Future<Either<Failure, List<T>>> search(String query);

  /// ุฌูุจ ุงูุนูุงุตุฑ ูุน pagination
  Future<Either<Failure, List<T>>> getPaginated({
    int page = 1,
    int limit = 10,
    String? sortBy,
    bool ascending = true,
  });
}
